#include <iostream>
#include <string>
#include <fstream>
#include <sstream>

#include "graph/weight_graph.hpp"
#include "graph/algorithm.hpp"


using namespace std;
using namespace graph;


int main() {

  wcout.imbue( std::locale("") );

  WGraph<int> g;

  g.add_vertex(1);
  g.add_vertex(2);
  g.add_vertex(3);
  g.add_vertex(4);
  g.add_vertex(5);
  g.add_vertex(6);

  g.add_edge(1, 2, 1);
  g.add_edge(2, 3, 1);
  g.add_edge(3, 4, 1);
  g.add_edge(4, 1, 1);
  g.add_edge(5, 1, 1);
  g.add_edge(1, 3, 1);
  g.add_edge(3, 6, 1);


  cout << "Path? " << has_path(g, 1, 2) << endl;

  g.for_each_neighbor_of(1, [&g](const int& v){
    cout << v << " : " << g.weight(1, v) << endl;
  });

  list<int> p = shortest_path(g, 1, 4);
  for(auto i : p)
    cout << i << "->";
  cout << "END\n";

  cout << has_cycle_from(g, 4) << endl;

  cout << all_reachable_from(g, 1) << endl;

  cout << "________\n";
  auto dead = dead_ends(g);
  for(auto p : dead)
    cout << "(" << p.first << ", " << p.second << ")"<< endl;

  cout << "~~~~~~~~~\n";

  auto e_p = eulerian_path(g);
  for(auto n : e_p)
    cout << n << " -> ";
  cout << "END\n";
  return 0;
}
